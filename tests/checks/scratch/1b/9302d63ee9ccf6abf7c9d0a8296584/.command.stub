#!/bin/bash
set -e
set -u
NXF_DEBUG=${NXF_DEBUG:=0}; [[ $NXF_DEBUG > 2 ]] && set -x

nxf_tree() {
    declare -a ALL_CHILD
    while read P PP;do
        ALL_CHILD[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    stat() {
        local x_ps=$(ps -o pid= -o state= -o pcpu= -o pmem= -o vsz= -o rss= $1)
        local x_io=$(cat /proc/$1/io 2> /dev/null | sed 's/^.*:\s*//' | tr '\n' ' ')
        local x_vm=$(cat /proc/$1/status 2> /dev/null | egrep 'VmPeak|VmHWM' | sed 's/^.*:\s*//' | sed 's/[\sa-zA-Z]*$//' | tr '\n' ' ')
        [[ ! $x_ps ]] && return 0

        printf "$x_ps"
        if [[ $x_vm ]]; then printf " $x_vm"; else printf " 0 0"; fi
        if [[ $x_io ]]; then printf " $x_io"; fi
        printf "\n"
    }

    walk() {
        stat $1
        for i in ${ALL_CHILD[$1]:=}; do walk $i; done
    }

    walk $1
}

nxf_pstat() {
    local data=$(nxf_tree $1)
    local tot=''
    if [[ "$data" ]]; then
      tot=$(awk '{ t3+=($3*10); t4+=($4*10); t5+=$5; t6+=$6; t7+=$7; t8+=$8; t9+=$9; t10+=$10; t11+=$11; t12+=$12; t13+=$13; t14+=$14 } END { printf "%d 0 %.0f %.0f %.0f %.0f %.0f %.0f %.0f %.0f %.0f %.0f %.0f %.0f\n", NR,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14 }' <<< "$data")
      printf "$tot\n" || true
    fi
}

nxf_sleep() {
  if [[ $1 < 0 ]]; then sleep 5;
  elif [[ $1 < 10 ]]; then sleep 0.1 2>/dev/null || sleep 1;
  elif [[ $1 < 130 ]]; then sleep 1;
  else sleep 5; fi
}

nxf_date() {
    local ts=$(date +%s%3N); [[ $ts == *3N ]] && date +%s000 || echo $ts
}

nxf_trace() {
  local pid=$1; local trg=$2;
  local tot;
  local count=0;
  declare -a max=(); for i in {0..13}; do max[i]=0; done
  while [[ true ]]; do
    kill -0 $pid >/dev/null
    [[ $? != 0 ]] && exit 0
    tot=$(nxf_pstat $pid)
    [[ ! $tot ]] && break
    IFS=' ' read -a val <<< "$tot"; unset IFS
    for i in {0..13}; do
      [ ${val[i]} -gt ${max[i]} ] && max[i]=${val[i]}
    done
    echo "pid state %cpu %mem vmem rss peak_vmem peak_rss rchar wchar syscr syscw read_bytes write_bytes" > $trg
    echo "${max[@]}" >> $trg
    nxf_sleep $count
    count=$((count+1))
  done
}


trap 'exit ${ret:=$?}' EXIT
touch .command.trace
start_millis=$(nxf_date)
(
/bin/bash -ue /Users/olafurh/git/nextflow/nextflow-private/tests/checks/scratch/1b/9302d63ee9ccf6abf7c9d0a8296584/.command.sh
) &
pid=$!
nxf_trace "$pid" .command.trace &
mon=$!
wait $pid || ret=$?
end_millis=$(nxf_date)
wait $mon
echo $((end_millis-start_millis)) >> .command.trace
